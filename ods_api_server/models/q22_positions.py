# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q22Positions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_cancelled: str=None, case_no: str=None, reservation_no: str=None, position_no: int=None, process_no: int=None, number_of_nights: str=None, number_of_rooms: int=None, number_of_person: int=None, number_of_breakfast: int=None, room_price: str=None, reservation_date_from: str=None, reservation_date_to: str=None, breakfast_price: str=None, deduction_type: str=None, reason_for_change: str=None, room_type: int=None, breakfast_approval_status: str=None, non_comm: str=None):  # noqa: E501
        """Q22Positions - a model defined in Swagger

        :param is_cancelled: The is_cancelled of this Q22Positions.  # noqa: E501
        :type is_cancelled: str
        :param case_no: The case_no of this Q22Positions.  # noqa: E501
        :type case_no: str
        :param reservation_no: The reservation_no of this Q22Positions.  # noqa: E501
        :type reservation_no: str
        :param position_no: The position_no of this Q22Positions.  # noqa: E501
        :type position_no: int
        :param process_no: The process_no of this Q22Positions.  # noqa: E501
        :type process_no: int
        :param number_of_nights: The number_of_nights of this Q22Positions.  # noqa: E501
        :type number_of_nights: str
        :param number_of_rooms: The number_of_rooms of this Q22Positions.  # noqa: E501
        :type number_of_rooms: int
        :param number_of_person: The number_of_person of this Q22Positions.  # noqa: E501
        :type number_of_person: int
        :param number_of_breakfast: The number_of_breakfast of this Q22Positions.  # noqa: E501
        :type number_of_breakfast: int
        :param room_price: The room_price of this Q22Positions.  # noqa: E501
        :type room_price: str
        :param reservation_date_from: The reservation_date_from of this Q22Positions.  # noqa: E501
        :type reservation_date_from: str
        :param reservation_date_to: The reservation_date_to of this Q22Positions.  # noqa: E501
        :type reservation_date_to: str
        :param breakfast_price: The breakfast_price of this Q22Positions.  # noqa: E501
        :type breakfast_price: str
        :param deduction_type: The deduction_type of this Q22Positions.  # noqa: E501
        :type deduction_type: str
        :param reason_for_change: The reason_for_change of this Q22Positions.  # noqa: E501
        :type reason_for_change: str
        :param room_type: The room_type of this Q22Positions.  # noqa: E501
        :type room_type: int
        :param breakfast_approval_status: The breakfast_approval_status of this Q22Positions.  # noqa: E501
        :type breakfast_approval_status: str
        :param non_comm: The non_comm of this Q22Positions.  # noqa: E501
        :type non_comm: str
        """
        self.swagger_types = {
            'is_cancelled': str,
            'case_no': str,
            'reservation_no': str,
            'position_no': int,
            'process_no': int,
            'number_of_nights': str,
            'number_of_rooms': int,
            'number_of_person': int,
            'number_of_breakfast': int,
            'room_price': str,
            'reservation_date_from': str,
            'reservation_date_to': str,
            'breakfast_price': str,
            'deduction_type': str,
            'reason_for_change': str,
            'room_type': int,
            'breakfast_approval_status': str,
            'non_comm': str
        }

        self.attribute_map = {
            'is_cancelled': 'IsCancelled',
            'case_no': 'CaseNo',
            'reservation_no': 'ReservationNo',
            'position_no': 'PositionNo',
            'process_no': 'ProcessNo',
            'number_of_nights': 'NumberOfNights',
            'number_of_rooms': 'NumberOfRooms',
            'number_of_person': 'NumberOfPerson',
            'number_of_breakfast': 'NumberOfBreakfast',
            'room_price': 'RoomPrice',
            'reservation_date_from': 'ReservationDateFrom',
            'reservation_date_to': 'ReservationDateTo',
            'breakfast_price': 'BreakfastPrice',
            'deduction_type': 'DeductionType',
            'reason_for_change': 'ReasonForChange',
            'room_type': 'RoomType',
            'breakfast_approval_status': 'BreakfastApprovalStatus',
            'non_comm': 'NonComm'
        }
        self._is_cancelled = is_cancelled
        self._case_no = case_no
        self._reservation_no = reservation_no
        self._position_no = position_no
        self._process_no = process_no
        self._number_of_nights = number_of_nights
        self._number_of_rooms = number_of_rooms
        self._number_of_person = number_of_person
        self._number_of_breakfast = number_of_breakfast
        self._room_price = room_price
        self._reservation_date_from = reservation_date_from
        self._reservation_date_to = reservation_date_to
        self._breakfast_price = breakfast_price
        self._deduction_type = deduction_type
        self._reason_for_change = reason_for_change
        self._room_type = room_type
        self._breakfast_approval_status = breakfast_approval_status
        self._non_comm = non_comm

    @classmethod
    def from_dict(cls, dikt) -> 'Q22Positions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q22_Positions of this Q22Positions.  # noqa: E501
        :rtype: Q22Positions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_cancelled(self) -> str:
        """Gets the is_cancelled of this Q22Positions.


        :return: The is_cancelled of this Q22Positions.
        :rtype: str
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled: str):
        """Sets the is_cancelled of this Q22Positions.


        :param is_cancelled: The is_cancelled of this Q22Positions.
        :type is_cancelled: str
        """
        if is_cancelled is None:
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def case_no(self) -> str:
        """Gets the case_no of this Q22Positions.


        :return: The case_no of this Q22Positions.
        :rtype: str
        """
        return self._case_no

    @case_no.setter
    def case_no(self, case_no: str):
        """Sets the case_no of this Q22Positions.


        :param case_no: The case_no of this Q22Positions.
        :type case_no: str
        """
        if case_no is None:
            raise ValueError("Invalid value for `case_no`, must not be `None`")  # noqa: E501

        self._case_no = case_no

    @property
    def reservation_no(self) -> str:
        """Gets the reservation_no of this Q22Positions.


        :return: The reservation_no of this Q22Positions.
        :rtype: str
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no: str):
        """Sets the reservation_no of this Q22Positions.


        :param reservation_no: The reservation_no of this Q22Positions.
        :type reservation_no: str
        """
        if reservation_no is None:
            raise ValueError("Invalid value for `reservation_no`, must not be `None`")  # noqa: E501

        self._reservation_no = reservation_no

    @property
    def position_no(self) -> int:
        """Gets the position_no of this Q22Positions.


        :return: The position_no of this Q22Positions.
        :rtype: int
        """
        return self._position_no

    @position_no.setter
    def position_no(self, position_no: int):
        """Sets the position_no of this Q22Positions.


        :param position_no: The position_no of this Q22Positions.
        :type position_no: int
        """
        if position_no is None:
            raise ValueError("Invalid value for `position_no`, must not be `None`")  # noqa: E501

        self._position_no = position_no

    @property
    def process_no(self) -> int:
        """Gets the process_no of this Q22Positions.


        :return: The process_no of this Q22Positions.
        :rtype: int
        """
        return self._process_no

    @process_no.setter
    def process_no(self, process_no: int):
        """Sets the process_no of this Q22Positions.


        :param process_no: The process_no of this Q22Positions.
        :type process_no: int
        """
        if process_no is None:
            raise ValueError("Invalid value for `process_no`, must not be `None`")  # noqa: E501

        self._process_no = process_no

    @property
    def number_of_nights(self) -> str:
        """Gets the number_of_nights of this Q22Positions.


        :return: The number_of_nights of this Q22Positions.
        :rtype: str
        """
        return self._number_of_nights

    @number_of_nights.setter
    def number_of_nights(self, number_of_nights: str):
        """Sets the number_of_nights of this Q22Positions.


        :param number_of_nights: The number_of_nights of this Q22Positions.
        :type number_of_nights: str
        """
        if number_of_nights is None:
            raise ValueError("Invalid value for `number_of_nights`, must not be `None`")  # noqa: E501

        self._number_of_nights = number_of_nights

    @property
    def number_of_rooms(self) -> int:
        """Gets the number_of_rooms of this Q22Positions.


        :return: The number_of_rooms of this Q22Positions.
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms: int):
        """Sets the number_of_rooms of this Q22Positions.


        :param number_of_rooms: The number_of_rooms of this Q22Positions.
        :type number_of_rooms: int
        """
        if number_of_rooms is None:
            raise ValueError("Invalid value for `number_of_rooms`, must not be `None`")  # noqa: E501

        self._number_of_rooms = number_of_rooms

    @property
    def number_of_person(self) -> int:
        """Gets the number_of_person of this Q22Positions.


        :return: The number_of_person of this Q22Positions.
        :rtype: int
        """
        return self._number_of_person

    @number_of_person.setter
    def number_of_person(self, number_of_person: int):
        """Sets the number_of_person of this Q22Positions.


        :param number_of_person: The number_of_person of this Q22Positions.
        :type number_of_person: int
        """
        if number_of_person is None:
            raise ValueError("Invalid value for `number_of_person`, must not be `None`")  # noqa: E501

        self._number_of_person = number_of_person

    @property
    def number_of_breakfast(self) -> int:
        """Gets the number_of_breakfast of this Q22Positions.


        :return: The number_of_breakfast of this Q22Positions.
        :rtype: int
        """
        return self._number_of_breakfast

    @number_of_breakfast.setter
    def number_of_breakfast(self, number_of_breakfast: int):
        """Sets the number_of_breakfast of this Q22Positions.


        :param number_of_breakfast: The number_of_breakfast of this Q22Positions.
        :type number_of_breakfast: int
        """
        if number_of_breakfast is None:
            raise ValueError("Invalid value for `number_of_breakfast`, must not be `None`")  # noqa: E501

        self._number_of_breakfast = number_of_breakfast

    @property
    def room_price(self) -> str:
        """Gets the room_price of this Q22Positions.


        :return: The room_price of this Q22Positions.
        :rtype: str
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price: str):
        """Sets the room_price of this Q22Positions.


        :param room_price: The room_price of this Q22Positions.
        :type room_price: str
        """
        if room_price is None:
            raise ValueError("Invalid value for `room_price`, must not be `None`")  # noqa: E501

        self._room_price = room_price

    @property
    def reservation_date_from(self) -> str:
        """Gets the reservation_date_from of this Q22Positions.


        :return: The reservation_date_from of this Q22Positions.
        :rtype: str
        """
        return self._reservation_date_from

    @reservation_date_from.setter
    def reservation_date_from(self, reservation_date_from: str):
        """Sets the reservation_date_from of this Q22Positions.


        :param reservation_date_from: The reservation_date_from of this Q22Positions.
        :type reservation_date_from: str
        """
        if reservation_date_from is None:
            raise ValueError("Invalid value for `reservation_date_from`, must not be `None`")  # noqa: E501

        self._reservation_date_from = reservation_date_from

    @property
    def reservation_date_to(self) -> str:
        """Gets the reservation_date_to of this Q22Positions.


        :return: The reservation_date_to of this Q22Positions.
        :rtype: str
        """
        return self._reservation_date_to

    @reservation_date_to.setter
    def reservation_date_to(self, reservation_date_to: str):
        """Sets the reservation_date_to of this Q22Positions.


        :param reservation_date_to: The reservation_date_to of this Q22Positions.
        :type reservation_date_to: str
        """
        if reservation_date_to is None:
            raise ValueError("Invalid value for `reservation_date_to`, must not be `None`")  # noqa: E501

        self._reservation_date_to = reservation_date_to

    @property
    def breakfast_price(self) -> str:
        """Gets the breakfast_price of this Q22Positions.


        :return: The breakfast_price of this Q22Positions.
        :rtype: str
        """
        return self._breakfast_price

    @breakfast_price.setter
    def breakfast_price(self, breakfast_price: str):
        """Sets the breakfast_price of this Q22Positions.


        :param breakfast_price: The breakfast_price of this Q22Positions.
        :type breakfast_price: str
        """
        if breakfast_price is None:
            raise ValueError("Invalid value for `breakfast_price`, must not be `None`")  # noqa: E501

        self._breakfast_price = breakfast_price

    @property
    def deduction_type(self) -> str:
        """Gets the deduction_type of this Q22Positions.


        :return: The deduction_type of this Q22Positions.
        :rtype: str
        """
        return self._deduction_type

    @deduction_type.setter
    def deduction_type(self, deduction_type: str):
        """Sets the deduction_type of this Q22Positions.


        :param deduction_type: The deduction_type of this Q22Positions.
        :type deduction_type: str
        """
        if deduction_type is None:
            raise ValueError("Invalid value for `deduction_type`, must not be `None`")  # noqa: E501

        self._deduction_type = deduction_type

    @property
    def reason_for_change(self) -> str:
        """Gets the reason_for_change of this Q22Positions.


        :return: The reason_for_change of this Q22Positions.
        :rtype: str
        """
        return self._reason_for_change

    @reason_for_change.setter
    def reason_for_change(self, reason_for_change: str):
        """Sets the reason_for_change of this Q22Positions.


        :param reason_for_change: The reason_for_change of this Q22Positions.
        :type reason_for_change: str
        """
        if reason_for_change is None:
            raise ValueError("Invalid value for `reason_for_change`, must not be `None`")  # noqa: E501

        self._reason_for_change = reason_for_change

    @property
    def room_type(self) -> int:
        """Gets the room_type of this Q22Positions.


        :return: The room_type of this Q22Positions.
        :rtype: int
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type: int):
        """Sets the room_type of this Q22Positions.


        :param room_type: The room_type of this Q22Positions.
        :type room_type: int
        """
        if room_type is None:
            raise ValueError("Invalid value for `room_type`, must not be `None`")  # noqa: E501

        self._room_type = room_type

    @property
    def breakfast_approval_status(self) -> str:
        """Gets the breakfast_approval_status of this Q22Positions.


        :return: The breakfast_approval_status of this Q22Positions.
        :rtype: str
        """
        return self._breakfast_approval_status

    @breakfast_approval_status.setter
    def breakfast_approval_status(self, breakfast_approval_status: str):
        """Sets the breakfast_approval_status of this Q22Positions.


        :param breakfast_approval_status: The breakfast_approval_status of this Q22Positions.
        :type breakfast_approval_status: str
        """
        if breakfast_approval_status is None:
            raise ValueError("Invalid value for `breakfast_approval_status`, must not be `None`")  # noqa: E501

        self._breakfast_approval_status = breakfast_approval_status

    @property
    def non_comm(self) -> str:
        """Gets the non_comm of this Q22Positions.


        :return: The non_comm of this Q22Positions.
        :rtype: str
        """
        return self._non_comm

    @non_comm.setter
    def non_comm(self, non_comm: str):
        """Sets the non_comm of this Q22Positions.


        :param non_comm: The non_comm of this Q22Positions.
        :type non_comm: str
        """

        self._non_comm = non_comm
