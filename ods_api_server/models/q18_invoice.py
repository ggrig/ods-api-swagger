# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server.models.q18_positions import Q18Positions  # noqa: F401,E501
from ods_api_server.models.all_ofq18_invoice_invoice_address import AllOfq18InvoiceInvoiceAddress  # noqa: F401,E501
from ods_api_server import util


class Q18Invoice(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, doc_no: str=None, is_cancelled: str=None, invoice_address: AllOfq18InvoiceInvoiceAddress=None, positions: List[Q18Positions]=None):  # noqa: E501
        """Q18Invoice - a model defined in Swagger

        :param doc_no: The doc_no of this Q18Invoice.  # noqa: E501
        :type doc_no: str
        :param is_cancelled: The is_cancelled of this Q18Invoice.  # noqa: E501
        :type is_cancelled: str
        :param invoice_address: The invoice_address of this Q18Invoice.  # noqa: E501
        :type invoice_address: AllOfq18InvoiceInvoiceAddress
        :param positions: The positions of this Q18Invoice.  # noqa: E501
        :type positions: List[Q18Positions]
        """
        self.swagger_types = {
            'doc_no': str,
            'is_cancelled': str,
            'invoice_address': AllOfq18InvoiceInvoiceAddress,
            'positions': List[Q18Positions]
        }

        self.attribute_map = {
            'doc_no': 'DocNo',
            'is_cancelled': 'IsCancelled',
            'invoice_address': 'InvoiceAddress',
            'positions': 'Positions'
        }
        self._doc_no = doc_no
        self._is_cancelled = is_cancelled
        self._invoice_address = invoice_address
        self._positions = positions

    @classmethod
    def from_dict(cls, dikt) -> 'Q18Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q18_Invoice of this Q18Invoice.  # noqa: E501
        :rtype: Q18Invoice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_no(self) -> str:
        """Gets the doc_no of this Q18Invoice.


        :return: The doc_no of this Q18Invoice.
        :rtype: str
        """
        return self._doc_no

    @doc_no.setter
    def doc_no(self, doc_no: str):
        """Sets the doc_no of this Q18Invoice.


        :param doc_no: The doc_no of this Q18Invoice.
        :type doc_no: str
        """
        if doc_no is None:
            raise ValueError("Invalid value for `doc_no`, must not be `None`")  # noqa: E501

        self._doc_no = doc_no

    @property
    def is_cancelled(self) -> str:
        """Gets the is_cancelled of this Q18Invoice.


        :return: The is_cancelled of this Q18Invoice.
        :rtype: str
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled: str):
        """Sets the is_cancelled of this Q18Invoice.


        :param is_cancelled: The is_cancelled of this Q18Invoice.
        :type is_cancelled: str
        """
        if is_cancelled is None:
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def invoice_address(self) -> AllOfq18InvoiceInvoiceAddress:
        """Gets the invoice_address of this Q18Invoice.


        :return: The invoice_address of this Q18Invoice.
        :rtype: AllOfq18InvoiceInvoiceAddress
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address: AllOfq18InvoiceInvoiceAddress):
        """Sets the invoice_address of this Q18Invoice.


        :param invoice_address: The invoice_address of this Q18Invoice.
        :type invoice_address: AllOfq18InvoiceInvoiceAddress
        """
        if invoice_address is None:
            raise ValueError("Invalid value for `invoice_address`, must not be `None`")  # noqa: E501

        self._invoice_address = invoice_address

    @property
    def positions(self) -> List[Q18Positions]:
        """Gets the positions of this Q18Invoice.


        :return: The positions of this Q18Invoice.
        :rtype: List[Q18Positions]
        """
        return self._positions

    @positions.setter
    def positions(self, positions: List[Q18Positions]):
        """Sets the positions of this Q18Invoice.


        :param positions: The positions of this Q18Invoice.
        :type positions: List[Q18Positions]
        """
        if positions is None:
            raise ValueError("Invalid value for `positions`, must not be `None`")  # noqa: E501

        self._positions = positions
