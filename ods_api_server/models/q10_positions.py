# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q10Positions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_cancelled: str=None, case_no: str=None, reservation_no: str=None, position_no: int=None, process_no: int=None, number_of_nights: str=None, number_of_rooms: int=None, number_of_person: int=None, number_of_breakfast: int=None, room_price: str=None, reservation_date_from: str=None, reservation_date_to: str=None):  # noqa: E501
        """Q10Positions - a model defined in Swagger

        :param is_cancelled: The is_cancelled of this Q10Positions.  # noqa: E501
        :type is_cancelled: str
        :param case_no: The case_no of this Q10Positions.  # noqa: E501
        :type case_no: str
        :param reservation_no: The reservation_no of this Q10Positions.  # noqa: E501
        :type reservation_no: str
        :param position_no: The position_no of this Q10Positions.  # noqa: E501
        :type position_no: int
        :param process_no: The process_no of this Q10Positions.  # noqa: E501
        :type process_no: int
        :param number_of_nights: The number_of_nights of this Q10Positions.  # noqa: E501
        :type number_of_nights: str
        :param number_of_rooms: The number_of_rooms of this Q10Positions.  # noqa: E501
        :type number_of_rooms: int
        :param number_of_person: The number_of_person of this Q10Positions.  # noqa: E501
        :type number_of_person: int
        :param number_of_breakfast: The number_of_breakfast of this Q10Positions.  # noqa: E501
        :type number_of_breakfast: int
        :param room_price: The room_price of this Q10Positions.  # noqa: E501
        :type room_price: str
        :param reservation_date_from: The reservation_date_from of this Q10Positions.  # noqa: E501
        :type reservation_date_from: str
        :param reservation_date_to: The reservation_date_to of this Q10Positions.  # noqa: E501
        :type reservation_date_to: str
        """
        self.swagger_types = {
            'is_cancelled': str,
            'case_no': str,
            'reservation_no': str,
            'position_no': int,
            'process_no': int,
            'number_of_nights': str,
            'number_of_rooms': int,
            'number_of_person': int,
            'number_of_breakfast': int,
            'room_price': str,
            'reservation_date_from': str,
            'reservation_date_to': str
        }

        self.attribute_map = {
            'is_cancelled': 'IsCancelled',
            'case_no': 'CaseNo',
            'reservation_no': 'ReservationNo',
            'position_no': 'PositionNo',
            'process_no': 'ProcessNo',
            'number_of_nights': 'NumberOfNights',
            'number_of_rooms': 'NumberOfRooms',
            'number_of_person': 'NumberOfPerson',
            'number_of_breakfast': 'NumberOfBreakfast',
            'room_price': 'RoomPrice',
            'reservation_date_from': 'ReservationDateFrom',
            'reservation_date_to': 'ReservationDateTo'
        }
        self._is_cancelled = is_cancelled
        self._case_no = case_no
        self._reservation_no = reservation_no
        self._position_no = position_no
        self._process_no = process_no
        self._number_of_nights = number_of_nights
        self._number_of_rooms = number_of_rooms
        self._number_of_person = number_of_person
        self._number_of_breakfast = number_of_breakfast
        self._room_price = room_price
        self._reservation_date_from = reservation_date_from
        self._reservation_date_to = reservation_date_to

    @classmethod
    def from_dict(cls, dikt) -> 'Q10Positions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q10_Positions of this Q10Positions.  # noqa: E501
        :rtype: Q10Positions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_cancelled(self) -> str:
        """Gets the is_cancelled of this Q10Positions.


        :return: The is_cancelled of this Q10Positions.
        :rtype: str
        """
        return self._is_cancelled

    @is_cancelled.setter
    def is_cancelled(self, is_cancelled: str):
        """Sets the is_cancelled of this Q10Positions.


        :param is_cancelled: The is_cancelled of this Q10Positions.
        :type is_cancelled: str
        """
        if is_cancelled is None:
            raise ValueError("Invalid value for `is_cancelled`, must not be `None`")  # noqa: E501

        self._is_cancelled = is_cancelled

    @property
    def case_no(self) -> str:
        """Gets the case_no of this Q10Positions.


        :return: The case_no of this Q10Positions.
        :rtype: str
        """
        return self._case_no

    @case_no.setter
    def case_no(self, case_no: str):
        """Sets the case_no of this Q10Positions.


        :param case_no: The case_no of this Q10Positions.
        :type case_no: str
        """
        if case_no is None:
            raise ValueError("Invalid value for `case_no`, must not be `None`")  # noqa: E501

        self._case_no = case_no

    @property
    def reservation_no(self) -> str:
        """Gets the reservation_no of this Q10Positions.


        :return: The reservation_no of this Q10Positions.
        :rtype: str
        """
        return self._reservation_no

    @reservation_no.setter
    def reservation_no(self, reservation_no: str):
        """Sets the reservation_no of this Q10Positions.


        :param reservation_no: The reservation_no of this Q10Positions.
        :type reservation_no: str
        """
        if reservation_no is None:
            raise ValueError("Invalid value for `reservation_no`, must not be `None`")  # noqa: E501

        self._reservation_no = reservation_no

    @property
    def position_no(self) -> int:
        """Gets the position_no of this Q10Positions.


        :return: The position_no of this Q10Positions.
        :rtype: int
        """
        return self._position_no

    @position_no.setter
    def position_no(self, position_no: int):
        """Sets the position_no of this Q10Positions.


        :param position_no: The position_no of this Q10Positions.
        :type position_no: int
        """
        if position_no is None:
            raise ValueError("Invalid value for `position_no`, must not be `None`")  # noqa: E501

        self._position_no = position_no

    @property
    def process_no(self) -> int:
        """Gets the process_no of this Q10Positions.


        :return: The process_no of this Q10Positions.
        :rtype: int
        """
        return self._process_no

    @process_no.setter
    def process_no(self, process_no: int):
        """Sets the process_no of this Q10Positions.


        :param process_no: The process_no of this Q10Positions.
        :type process_no: int
        """
        if process_no is None:
            raise ValueError("Invalid value for `process_no`, must not be `None`")  # noqa: E501

        self._process_no = process_no

    @property
    def number_of_nights(self) -> str:
        """Gets the number_of_nights of this Q10Positions.


        :return: The number_of_nights of this Q10Positions.
        :rtype: str
        """
        return self._number_of_nights

    @number_of_nights.setter
    def number_of_nights(self, number_of_nights: str):
        """Sets the number_of_nights of this Q10Positions.


        :param number_of_nights: The number_of_nights of this Q10Positions.
        :type number_of_nights: str
        """
        if number_of_nights is None:
            raise ValueError("Invalid value for `number_of_nights`, must not be `None`")  # noqa: E501

        self._number_of_nights = number_of_nights

    @property
    def number_of_rooms(self) -> int:
        """Gets the number_of_rooms of this Q10Positions.


        :return: The number_of_rooms of this Q10Positions.
        :rtype: int
        """
        return self._number_of_rooms

    @number_of_rooms.setter
    def number_of_rooms(self, number_of_rooms: int):
        """Sets the number_of_rooms of this Q10Positions.


        :param number_of_rooms: The number_of_rooms of this Q10Positions.
        :type number_of_rooms: int
        """
        if number_of_rooms is None:
            raise ValueError("Invalid value for `number_of_rooms`, must not be `None`")  # noqa: E501

        self._number_of_rooms = number_of_rooms

    @property
    def number_of_person(self) -> int:
        """Gets the number_of_person of this Q10Positions.


        :return: The number_of_person of this Q10Positions.
        :rtype: int
        """
        return self._number_of_person

    @number_of_person.setter
    def number_of_person(self, number_of_person: int):
        """Sets the number_of_person of this Q10Positions.


        :param number_of_person: The number_of_person of this Q10Positions.
        :type number_of_person: int
        """
        if number_of_person is None:
            raise ValueError("Invalid value for `number_of_person`, must not be `None`")  # noqa: E501

        self._number_of_person = number_of_person

    @property
    def number_of_breakfast(self) -> int:
        """Gets the number_of_breakfast of this Q10Positions.


        :return: The number_of_breakfast of this Q10Positions.
        :rtype: int
        """
        return self._number_of_breakfast

    @number_of_breakfast.setter
    def number_of_breakfast(self, number_of_breakfast: int):
        """Sets the number_of_breakfast of this Q10Positions.


        :param number_of_breakfast: The number_of_breakfast of this Q10Positions.
        :type number_of_breakfast: int
        """
        if number_of_breakfast is None:
            raise ValueError("Invalid value for `number_of_breakfast`, must not be `None`")  # noqa: E501

        self._number_of_breakfast = number_of_breakfast

    @property
    def room_price(self) -> str:
        """Gets the room_price of this Q10Positions.


        :return: The room_price of this Q10Positions.
        :rtype: str
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price: str):
        """Sets the room_price of this Q10Positions.


        :param room_price: The room_price of this Q10Positions.
        :type room_price: str
        """
        if room_price is None:
            raise ValueError("Invalid value for `room_price`, must not be `None`")  # noqa: E501

        self._room_price = room_price

    @property
    def reservation_date_from(self) -> str:
        """Gets the reservation_date_from of this Q10Positions.


        :return: The reservation_date_from of this Q10Positions.
        :rtype: str
        """
        return self._reservation_date_from

    @reservation_date_from.setter
    def reservation_date_from(self, reservation_date_from: str):
        """Sets the reservation_date_from of this Q10Positions.


        :param reservation_date_from: The reservation_date_from of this Q10Positions.
        :type reservation_date_from: str
        """
        if reservation_date_from is None:
            raise ValueError("Invalid value for `reservation_date_from`, must not be `None`")  # noqa: E501

        self._reservation_date_from = reservation_date_from

    @property
    def reservation_date_to(self) -> str:
        """Gets the reservation_date_to of this Q10Positions.


        :return: The reservation_date_to of this Q10Positions.
        :rtype: str
        """
        return self._reservation_date_to

    @reservation_date_to.setter
    def reservation_date_to(self, reservation_date_to: str):
        """Sets the reservation_date_to of this Q10Positions.


        :param reservation_date_to: The reservation_date_to of this Q10Positions.
        :type reservation_date_to: str
        """
        if reservation_date_to is None:
            raise ValueError("Invalid value for `reservation_date_to`, must not be `None`")  # noqa: E501

        self._reservation_date_to = reservation_date_to
