# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q6Contact(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, contact_no: str=None, first_name: str=None, middle_name: str=None, surname: str=None, e_mail: str=None, phone_no: str=None, fax_no: str=None):  # noqa: E501
        """Q6Contact - a model defined in Swagger

        :param contact_no: The contact_no of this Q6Contact.  # noqa: E501
        :type contact_no: str
        :param first_name: The first_name of this Q6Contact.  # noqa: E501
        :type first_name: str
        :param middle_name: The middle_name of this Q6Contact.  # noqa: E501
        :type middle_name: str
        :param surname: The surname of this Q6Contact.  # noqa: E501
        :type surname: str
        :param e_mail: The e_mail of this Q6Contact.  # noqa: E501
        :type e_mail: str
        :param phone_no: The phone_no of this Q6Contact.  # noqa: E501
        :type phone_no: str
        :param fax_no: The fax_no of this Q6Contact.  # noqa: E501
        :type fax_no: str
        """
        self.swagger_types = {
            'contact_no': str,
            'first_name': str,
            'middle_name': str,
            'surname': str,
            'e_mail': str,
            'phone_no': str,
            'fax_no': str
        }

        self.attribute_map = {
            'contact_no': 'ContactNo',
            'first_name': 'FirstName',
            'middle_name': 'MiddleName',
            'surname': 'Surname',
            'e_mail': 'EMail',
            'phone_no': 'PhoneNo',
            'fax_no': 'FaxNo'
        }
        self._contact_no = contact_no
        self._first_name = first_name
        self._middle_name = middle_name
        self._surname = surname
        self._e_mail = e_mail
        self._phone_no = phone_no
        self._fax_no = fax_no

    @classmethod
    def from_dict(cls, dikt) -> 'Q6Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q6_Contact of this Q6Contact.  # noqa: E501
        :rtype: Q6Contact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_no(self) -> str:
        """Gets the contact_no of this Q6Contact.


        :return: The contact_no of this Q6Contact.
        :rtype: str
        """
        return self._contact_no

    @contact_no.setter
    def contact_no(self, contact_no: str):
        """Sets the contact_no of this Q6Contact.


        :param contact_no: The contact_no of this Q6Contact.
        :type contact_no: str
        """
        if contact_no is None:
            raise ValueError("Invalid value for `contact_no`, must not be `None`")  # noqa: E501

        self._contact_no = contact_no

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Q6Contact.


        :return: The first_name of this Q6Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Q6Contact.


        :param first_name: The first_name of this Q6Contact.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self) -> str:
        """Gets the middle_name of this Q6Contact.


        :return: The middle_name of this Q6Contact.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name: str):
        """Sets the middle_name of this Q6Contact.


        :param middle_name: The middle_name of this Q6Contact.
        :type middle_name: str
        """
        if middle_name is None:
            raise ValueError("Invalid value for `middle_name`, must not be `None`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def surname(self) -> str:
        """Gets the surname of this Q6Contact.


        :return: The surname of this Q6Contact.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname: str):
        """Sets the surname of this Q6Contact.


        :param surname: The surname of this Q6Contact.
        :type surname: str
        """
        if surname is None:
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501

        self._surname = surname

    @property
    def e_mail(self) -> str:
        """Gets the e_mail of this Q6Contact.


        :return: The e_mail of this Q6Contact.
        :rtype: str
        """
        return self._e_mail

    @e_mail.setter
    def e_mail(self, e_mail: str):
        """Sets the e_mail of this Q6Contact.


        :param e_mail: The e_mail of this Q6Contact.
        :type e_mail: str
        """
        if e_mail is None:
            raise ValueError("Invalid value for `e_mail`, must not be `None`")  # noqa: E501

        self._e_mail = e_mail

    @property
    def phone_no(self) -> str:
        """Gets the phone_no of this Q6Contact.


        :return: The phone_no of this Q6Contact.
        :rtype: str
        """
        return self._phone_no

    @phone_no.setter
    def phone_no(self, phone_no: str):
        """Sets the phone_no of this Q6Contact.


        :param phone_no: The phone_no of this Q6Contact.
        :type phone_no: str
        """
        if phone_no is None:
            raise ValueError("Invalid value for `phone_no`, must not be `None`")  # noqa: E501

        self._phone_no = phone_no

    @property
    def fax_no(self) -> str:
        """Gets the fax_no of this Q6Contact.


        :return: The fax_no of this Q6Contact.
        :rtype: str
        """
        return self._fax_no

    @fax_no.setter
    def fax_no(self, fax_no: str):
        """Sets the fax_no of this Q6Contact.


        :param fax_no: The fax_no of this Q6Contact.
        :type fax_no: str
        """
        if fax_no is None:
            raise ValueError("Invalid value for `fax_no`, must not be `None`")  # noqa: E501

        self._fax_no = fax_no
