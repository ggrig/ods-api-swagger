# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q26HotelCreditCardInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_no: str=None, pcn: int=None, expiry: str=None, company: str=None, authorization_date: str=None, state: List[str]=None, scheme_reference_id: str=None):  # noqa: E501
        """Q26HotelCreditCardInfo - a model defined in Swagger

        :param customer_no: The customer_no of this Q26HotelCreditCardInfo.  # noqa: E501
        :type customer_no: str
        :param pcn: The pcn of this Q26HotelCreditCardInfo.  # noqa: E501
        :type pcn: int
        :param expiry: The expiry of this Q26HotelCreditCardInfo.  # noqa: E501
        :type expiry: str
        :param company: The company of this Q26HotelCreditCardInfo.  # noqa: E501
        :type company: str
        :param authorization_date: The authorization_date of this Q26HotelCreditCardInfo.  # noqa: E501
        :type authorization_date: str
        :param state: The state of this Q26HotelCreditCardInfo.  # noqa: E501
        :type state: List[str]
        :param scheme_reference_id: The scheme_reference_id of this Q26HotelCreditCardInfo.  # noqa: E501
        :type scheme_reference_id: str
        """
        self.swagger_types = {
            'customer_no': str,
            'pcn': int,
            'expiry': str,
            'company': str,
            'authorization_date': str,
            'state': List[str],
            'scheme_reference_id': str
        }

        self.attribute_map = {
            'customer_no': 'CustomerNo',
            'pcn': 'PCN',
            'expiry': 'Expiry',
            'company': 'Company',
            'authorization_date': 'AuthorizationDate',
            'state': 'State',
            'scheme_reference_id': 'schemeReferenceID'
        }
        self._customer_no = customer_no
        self._pcn = pcn
        self._expiry = expiry
        self._company = company
        self._authorization_date = authorization_date
        self._state = state
        self._scheme_reference_id = scheme_reference_id

    @classmethod
    def from_dict(cls, dikt) -> 'Q26HotelCreditCardInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q26_HotelCreditCardInfo of this Q26HotelCreditCardInfo.  # noqa: E501
        :rtype: Q26HotelCreditCardInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_no(self) -> str:
        """Gets the customer_no of this Q26HotelCreditCardInfo.


        :return: The customer_no of this Q26HotelCreditCardInfo.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no: str):
        """Sets the customer_no of this Q26HotelCreditCardInfo.


        :param customer_no: The customer_no of this Q26HotelCreditCardInfo.
        :type customer_no: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def pcn(self) -> int:
        """Gets the pcn of this Q26HotelCreditCardInfo.


        :return: The pcn of this Q26HotelCreditCardInfo.
        :rtype: int
        """
        return self._pcn

    @pcn.setter
    def pcn(self, pcn: int):
        """Sets the pcn of this Q26HotelCreditCardInfo.


        :param pcn: The pcn of this Q26HotelCreditCardInfo.
        :type pcn: int
        """
        if pcn is None:
            raise ValueError("Invalid value for `pcn`, must not be `None`")  # noqa: E501

        self._pcn = pcn

    @property
    def expiry(self) -> str:
        """Gets the expiry of this Q26HotelCreditCardInfo.


        :return: The expiry of this Q26HotelCreditCardInfo.
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry: str):
        """Sets the expiry of this Q26HotelCreditCardInfo.


        :param expiry: The expiry of this Q26HotelCreditCardInfo.
        :type expiry: str
        """
        if expiry is None:
            raise ValueError("Invalid value for `expiry`, must not be `None`")  # noqa: E501

        self._expiry = expiry

    @property
    def company(self) -> str:
        """Gets the company of this Q26HotelCreditCardInfo.


        :return: The company of this Q26HotelCreditCardInfo.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Q26HotelCreditCardInfo.


        :param company: The company of this Q26HotelCreditCardInfo.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company

    @property
    def authorization_date(self) -> str:
        """Gets the authorization_date of this Q26HotelCreditCardInfo.


        :return: The authorization_date of this Q26HotelCreditCardInfo.
        :rtype: str
        """
        return self._authorization_date

    @authorization_date.setter
    def authorization_date(self, authorization_date: str):
        """Sets the authorization_date of this Q26HotelCreditCardInfo.


        :param authorization_date: The authorization_date of this Q26HotelCreditCardInfo.
        :type authorization_date: str
        """
        if authorization_date is None:
            raise ValueError("Invalid value for `authorization_date`, must not be `None`")  # noqa: E501

        self._authorization_date = authorization_date

    @property
    def state(self) -> List[str]:
        """Gets the state of this Q26HotelCreditCardInfo.


        :return: The state of this Q26HotelCreditCardInfo.
        :rtype: List[str]
        """
        return self._state

    @state.setter
    def state(self, state: List[str]):
        """Sets the state of this Q26HotelCreditCardInfo.


        :param state: The state of this Q26HotelCreditCardInfo.
        :type state: List[str]
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def scheme_reference_id(self) -> str:
        """Gets the scheme_reference_id of this Q26HotelCreditCardInfo.


        :return: The scheme_reference_id of this Q26HotelCreditCardInfo.
        :rtype: str
        """
        return self._scheme_reference_id

    @scheme_reference_id.setter
    def scheme_reference_id(self, scheme_reference_id: str):
        """Sets the scheme_reference_id of this Q26HotelCreditCardInfo.


        :param scheme_reference_id: The scheme_reference_id of this Q26HotelCreditCardInfo.
        :type scheme_reference_id: str
        """
        if scheme_reference_id is None:
            raise ValueError("Invalid value for `scheme_reference_id`, must not be `None`")  # noqa: E501

        self._scheme_reference_id = scheme_reference_id
