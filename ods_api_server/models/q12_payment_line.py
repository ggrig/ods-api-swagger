# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server.models.all_ofq12_payment_line_documents import AllOfq12PaymentLineDocuments  # noqa: F401,E501
from ods_api_server import util


class Q12PaymentLine(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, posting_date: str=None, payment_method_code: str=None, ext_document_no: str=None, documents: AllOfq12PaymentLineDocuments=None, currency_code: str=None, remaining_amount: str=None, fix_fee_amount: str=None, var_fee_amount: str=None):  # noqa: E501
        """Q12PaymentLine - a model defined in Swagger

        :param posting_date: The posting_date of this Q12PaymentLine.  # noqa: E501
        :type posting_date: str
        :param payment_method_code: The payment_method_code of this Q12PaymentLine.  # noqa: E501
        :type payment_method_code: str
        :param ext_document_no: The ext_document_no of this Q12PaymentLine.  # noqa: E501
        :type ext_document_no: str
        :param documents: The documents of this Q12PaymentLine.  # noqa: E501
        :type documents: AllOfq12PaymentLineDocuments
        :param currency_code: The currency_code of this Q12PaymentLine.  # noqa: E501
        :type currency_code: str
        :param remaining_amount: The remaining_amount of this Q12PaymentLine.  # noqa: E501
        :type remaining_amount: str
        :param fix_fee_amount: The fix_fee_amount of this Q12PaymentLine.  # noqa: E501
        :type fix_fee_amount: str
        :param var_fee_amount: The var_fee_amount of this Q12PaymentLine.  # noqa: E501
        :type var_fee_amount: str
        """
        self.swagger_types = {
            'posting_date': str,
            'payment_method_code': str,
            'ext_document_no': str,
            'documents': AllOfq12PaymentLineDocuments,
            'currency_code': str,
            'remaining_amount': str,
            'fix_fee_amount': str,
            'var_fee_amount': str
        }

        self.attribute_map = {
            'posting_date': 'PostingDate',
            'payment_method_code': 'PaymentMethodCode',
            'ext_document_no': 'ExtDocumentNo',
            'documents': 'Documents',
            'currency_code': 'CurrencyCode',
            'remaining_amount': 'RemainingAmount',
            'fix_fee_amount': 'FixFeeAmount',
            'var_fee_amount': 'VarFeeAmount'
        }
        self._posting_date = posting_date
        self._payment_method_code = payment_method_code
        self._ext_document_no = ext_document_no
        self._documents = documents
        self._currency_code = currency_code
        self._remaining_amount = remaining_amount
        self._fix_fee_amount = fix_fee_amount
        self._var_fee_amount = var_fee_amount

    @classmethod
    def from_dict(cls, dikt) -> 'Q12PaymentLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q12_PaymentLine of this Q12PaymentLine.  # noqa: E501
        :rtype: Q12PaymentLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def posting_date(self) -> str:
        """Gets the posting_date of this Q12PaymentLine.


        :return: The posting_date of this Q12PaymentLine.
        :rtype: str
        """
        return self._posting_date

    @posting_date.setter
    def posting_date(self, posting_date: str):
        """Sets the posting_date of this Q12PaymentLine.


        :param posting_date: The posting_date of this Q12PaymentLine.
        :type posting_date: str
        """
        if posting_date is None:
            raise ValueError("Invalid value for `posting_date`, must not be `None`")  # noqa: E501

        self._posting_date = posting_date

    @property
    def payment_method_code(self) -> str:
        """Gets the payment_method_code of this Q12PaymentLine.


        :return: The payment_method_code of this Q12PaymentLine.
        :rtype: str
        """
        return self._payment_method_code

    @payment_method_code.setter
    def payment_method_code(self, payment_method_code: str):
        """Sets the payment_method_code of this Q12PaymentLine.


        :param payment_method_code: The payment_method_code of this Q12PaymentLine.
        :type payment_method_code: str
        """
        if payment_method_code is None:
            raise ValueError("Invalid value for `payment_method_code`, must not be `None`")  # noqa: E501

        self._payment_method_code = payment_method_code

    @property
    def ext_document_no(self) -> str:
        """Gets the ext_document_no of this Q12PaymentLine.


        :return: The ext_document_no of this Q12PaymentLine.
        :rtype: str
        """
        return self._ext_document_no

    @ext_document_no.setter
    def ext_document_no(self, ext_document_no: str):
        """Sets the ext_document_no of this Q12PaymentLine.


        :param ext_document_no: The ext_document_no of this Q12PaymentLine.
        :type ext_document_no: str
        """
        if ext_document_no is None:
            raise ValueError("Invalid value for `ext_document_no`, must not be `None`")  # noqa: E501

        self._ext_document_no = ext_document_no

    @property
    def documents(self) -> AllOfq12PaymentLineDocuments:
        """Gets the documents of this Q12PaymentLine.


        :return: The documents of this Q12PaymentLine.
        :rtype: AllOfq12PaymentLineDocuments
        """
        return self._documents

    @documents.setter
    def documents(self, documents: AllOfq12PaymentLineDocuments):
        """Sets the documents of this Q12PaymentLine.


        :param documents: The documents of this Q12PaymentLine.
        :type documents: AllOfq12PaymentLineDocuments
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")  # noqa: E501

        self._documents = documents

    @property
    def currency_code(self) -> str:
        """Gets the currency_code of this Q12PaymentLine.


        :return: The currency_code of this Q12PaymentLine.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """Sets the currency_code of this Q12PaymentLine.


        :param currency_code: The currency_code of this Q12PaymentLine.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def remaining_amount(self) -> str:
        """Gets the remaining_amount of this Q12PaymentLine.


        :return: The remaining_amount of this Q12PaymentLine.
        :rtype: str
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount: str):
        """Sets the remaining_amount of this Q12PaymentLine.


        :param remaining_amount: The remaining_amount of this Q12PaymentLine.
        :type remaining_amount: str
        """
        if remaining_amount is None:
            raise ValueError("Invalid value for `remaining_amount`, must not be `None`")  # noqa: E501

        self._remaining_amount = remaining_amount

    @property
    def fix_fee_amount(self) -> str:
        """Gets the fix_fee_amount of this Q12PaymentLine.


        :return: The fix_fee_amount of this Q12PaymentLine.
        :rtype: str
        """
        return self._fix_fee_amount

    @fix_fee_amount.setter
    def fix_fee_amount(self, fix_fee_amount: str):
        """Sets the fix_fee_amount of this Q12PaymentLine.


        :param fix_fee_amount: The fix_fee_amount of this Q12PaymentLine.
        :type fix_fee_amount: str
        """
        if fix_fee_amount is None:
            raise ValueError("Invalid value for `fix_fee_amount`, must not be `None`")  # noqa: E501

        self._fix_fee_amount = fix_fee_amount

    @property
    def var_fee_amount(self) -> str:
        """Gets the var_fee_amount of this Q12PaymentLine.


        :return: The var_fee_amount of this Q12PaymentLine.
        :rtype: str
        """
        return self._var_fee_amount

    @var_fee_amount.setter
    def var_fee_amount(self, var_fee_amount: str):
        """Sets the var_fee_amount of this Q12PaymentLine.


        :param var_fee_amount: The var_fee_amount of this Q12PaymentLine.
        :type var_fee_amount: str
        """
        if var_fee_amount is None:
            raise ValueError("Invalid value for `var_fee_amount`, must not be `None`")  # noqa: E501

        self._var_fee_amount = var_fee_amount
