# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q14Customer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_no: str=None, name: str=None, name2: str=None, address: str=None, address2: str=None, city: str=None, post_code: str=None, country_region: str=None, contact: str=None, phone: str=None, correspondence_type: str=None, e_mail: str=None, fax: str=None, e_mail_copy: str=None, fax_copy: str=None, webportal_registered: str=None):  # noqa: E501
        """Q14Customer - a model defined in Swagger

        :param customer_no: The customer_no of this Q14Customer.  # noqa: E501
        :type customer_no: str
        :param name: The name of this Q14Customer.  # noqa: E501
        :type name: str
        :param name2: The name2 of this Q14Customer.  # noqa: E501
        :type name2: str
        :param address: The address of this Q14Customer.  # noqa: E501
        :type address: str
        :param address2: The address2 of this Q14Customer.  # noqa: E501
        :type address2: str
        :param city: The city of this Q14Customer.  # noqa: E501
        :type city: str
        :param post_code: The post_code of this Q14Customer.  # noqa: E501
        :type post_code: str
        :param country_region: The country_region of this Q14Customer.  # noqa: E501
        :type country_region: str
        :param contact: The contact of this Q14Customer.  # noqa: E501
        :type contact: str
        :param phone: The phone of this Q14Customer.  # noqa: E501
        :type phone: str
        :param correspondence_type: The correspondence_type of this Q14Customer.  # noqa: E501
        :type correspondence_type: str
        :param e_mail: The e_mail of this Q14Customer.  # noqa: E501
        :type e_mail: str
        :param fax: The fax of this Q14Customer.  # noqa: E501
        :type fax: str
        :param e_mail_copy: The e_mail_copy of this Q14Customer.  # noqa: E501
        :type e_mail_copy: str
        :param fax_copy: The fax_copy of this Q14Customer.  # noqa: E501
        :type fax_copy: str
        :param webportal_registered: The webportal_registered of this Q14Customer.  # noqa: E501
        :type webportal_registered: str
        """
        self.swagger_types = {
            'customer_no': str,
            'name': str,
            'name2': str,
            'address': str,
            'address2': str,
            'city': str,
            'post_code': str,
            'country_region': str,
            'contact': str,
            'phone': str,
            'correspondence_type': str,
            'e_mail': str,
            'fax': str,
            'e_mail_copy': str,
            'fax_copy': str,
            'webportal_registered': str
        }

        self.attribute_map = {
            'customer_no': 'CustomerNo',
            'name': 'Name',
            'name2': 'Name2',
            'address': 'Address',
            'address2': 'Address2',
            'city': 'City',
            'post_code': 'PostCode',
            'country_region': 'CountryRegion',
            'contact': 'Contact',
            'phone': 'Phone',
            'correspondence_type': 'CorrespondenceType',
            'e_mail': 'EMail',
            'fax': 'Fax',
            'e_mail_copy': 'EMailCopy',
            'fax_copy': 'FaxCopy',
            'webportal_registered': 'WebportalRegistered'
        }
        self._customer_no = customer_no
        self._name = name
        self._name2 = name2
        self._address = address
        self._address2 = address2
        self._city = city
        self._post_code = post_code
        self._country_region = country_region
        self._contact = contact
        self._phone = phone
        self._correspondence_type = correspondence_type
        self._e_mail = e_mail
        self._fax = fax
        self._e_mail_copy = e_mail_copy
        self._fax_copy = fax_copy
        self._webportal_registered = webportal_registered

    @classmethod
    def from_dict(cls, dikt) -> 'Q14Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q14_Customer of this Q14Customer.  # noqa: E501
        :rtype: Q14Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_no(self) -> str:
        """Gets the customer_no of this Q14Customer.


        :return: The customer_no of this Q14Customer.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no: str):
        """Sets the customer_no of this Q14Customer.


        :param customer_no: The customer_no of this Q14Customer.
        :type customer_no: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def name(self) -> str:
        """Gets the name of this Q14Customer.


        :return: The name of this Q14Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Q14Customer.


        :param name: The name of this Q14Customer.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name2(self) -> str:
        """Gets the name2 of this Q14Customer.


        :return: The name2 of this Q14Customer.
        :rtype: str
        """
        return self._name2

    @name2.setter
    def name2(self, name2: str):
        """Sets the name2 of this Q14Customer.


        :param name2: The name2 of this Q14Customer.
        :type name2: str
        """
        if name2 is None:
            raise ValueError("Invalid value for `name2`, must not be `None`")  # noqa: E501

        self._name2 = name2

    @property
    def address(self) -> str:
        """Gets the address of this Q14Customer.


        :return: The address of this Q14Customer.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Q14Customer.


        :param address: The address of this Q14Customer.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address2(self) -> str:
        """Gets the address2 of this Q14Customer.


        :return: The address2 of this Q14Customer.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2: str):
        """Sets the address2 of this Q14Customer.


        :param address2: The address2 of this Q14Customer.
        :type address2: str
        """
        if address2 is None:
            raise ValueError("Invalid value for `address2`, must not be `None`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self) -> str:
        """Gets the city of this Q14Customer.


        :return: The city of this Q14Customer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Q14Customer.


        :param city: The city of this Q14Customer.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def post_code(self) -> str:
        """Gets the post_code of this Q14Customer.


        :return: The post_code of this Q14Customer.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code: str):
        """Sets the post_code of this Q14Customer.


        :param post_code: The post_code of this Q14Customer.
        :type post_code: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")  # noqa: E501

        self._post_code = post_code

    @property
    def country_region(self) -> str:
        """Gets the country_region of this Q14Customer.


        :return: The country_region of this Q14Customer.
        :rtype: str
        """
        return self._country_region

    @country_region.setter
    def country_region(self, country_region: str):
        """Sets the country_region of this Q14Customer.


        :param country_region: The country_region of this Q14Customer.
        :type country_region: str
        """
        if country_region is None:
            raise ValueError("Invalid value for `country_region`, must not be `None`")  # noqa: E501

        self._country_region = country_region

    @property
    def contact(self) -> str:
        """Gets the contact of this Q14Customer.


        :return: The contact of this Q14Customer.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this Q14Customer.


        :param contact: The contact of this Q14Customer.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def phone(self) -> str:
        """Gets the phone of this Q14Customer.


        :return: The phone of this Q14Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Q14Customer.


        :param phone: The phone of this Q14Customer.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def correspondence_type(self) -> str:
        """Gets the correspondence_type of this Q14Customer.


        :return: The correspondence_type of this Q14Customer.
        :rtype: str
        """
        return self._correspondence_type

    @correspondence_type.setter
    def correspondence_type(self, correspondence_type: str):
        """Sets the correspondence_type of this Q14Customer.


        :param correspondence_type: The correspondence_type of this Q14Customer.
        :type correspondence_type: str
        """
        if correspondence_type is None:
            raise ValueError("Invalid value for `correspondence_type`, must not be `None`")  # noqa: E501

        self._correspondence_type = correspondence_type

    @property
    def e_mail(self) -> str:
        """Gets the e_mail of this Q14Customer.


        :return: The e_mail of this Q14Customer.
        :rtype: str
        """
        return self._e_mail

    @e_mail.setter
    def e_mail(self, e_mail: str):
        """Sets the e_mail of this Q14Customer.


        :param e_mail: The e_mail of this Q14Customer.
        :type e_mail: str
        """
        if e_mail is None:
            raise ValueError("Invalid value for `e_mail`, must not be `None`")  # noqa: E501

        self._e_mail = e_mail

    @property
    def fax(self) -> str:
        """Gets the fax of this Q14Customer.


        :return: The fax of this Q14Customer.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax: str):
        """Sets the fax of this Q14Customer.


        :param fax: The fax of this Q14Customer.
        :type fax: str
        """
        if fax is None:
            raise ValueError("Invalid value for `fax`, must not be `None`")  # noqa: E501

        self._fax = fax

    @property
    def e_mail_copy(self) -> str:
        """Gets the e_mail_copy of this Q14Customer.


        :return: The e_mail_copy of this Q14Customer.
        :rtype: str
        """
        return self._e_mail_copy

    @e_mail_copy.setter
    def e_mail_copy(self, e_mail_copy: str):
        """Sets the e_mail_copy of this Q14Customer.


        :param e_mail_copy: The e_mail_copy of this Q14Customer.
        :type e_mail_copy: str
        """
        if e_mail_copy is None:
            raise ValueError("Invalid value for `e_mail_copy`, must not be `None`")  # noqa: E501

        self._e_mail_copy = e_mail_copy

    @property
    def fax_copy(self) -> str:
        """Gets the fax_copy of this Q14Customer.


        :return: The fax_copy of this Q14Customer.
        :rtype: str
        """
        return self._fax_copy

    @fax_copy.setter
    def fax_copy(self, fax_copy: str):
        """Sets the fax_copy of this Q14Customer.


        :param fax_copy: The fax_copy of this Q14Customer.
        :type fax_copy: str
        """
        if fax_copy is None:
            raise ValueError("Invalid value for `fax_copy`, must not be `None`")  # noqa: E501

        self._fax_copy = fax_copy

    @property
    def webportal_registered(self) -> str:
        """Gets the webportal_registered of this Q14Customer.


        :return: The webportal_registered of this Q14Customer.
        :rtype: str
        """
        return self._webportal_registered

    @webportal_registered.setter
    def webportal_registered(self, webportal_registered: str):
        """Sets the webportal_registered of this Q14Customer.


        :param webportal_registered: The webportal_registered of this Q14Customer.
        :type webportal_registered: str
        """
        if webportal_registered is None:
            raise ValueError("Invalid value for `webportal_registered`, must not be `None`")  # noqa: E501

        self._webportal_registered = webportal_registered
