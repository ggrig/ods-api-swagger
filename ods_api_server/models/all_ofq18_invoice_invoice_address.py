# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server.models.q18_invoice_address import Q18InvoiceAddress  # noqa: F401,E501
from ods_api_server import util


class AllOfq18InvoiceInvoiceAddress(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address: str=None, address2: str=None, city: str=None, customer_no: str=None, name: str=None, name2: str=None, post_code: str=None, country_code: str=None, correspondence_type: str=None, correspondence_address: str=None, accounting_contact: str=None):  # noqa: E501
        """AllOfq18InvoiceInvoiceAddress - a model defined in Swagger

        :param address: The address of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type address: str
        :param address2: The address2 of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type address2: str
        :param city: The city of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type city: str
        :param customer_no: The customer_no of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type customer_no: str
        :param name: The name of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type name: str
        :param name2: The name2 of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type name2: str
        :param post_code: The post_code of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type post_code: str
        :param country_code: The country_code of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type country_code: str
        :param correspondence_type: The correspondence_type of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type correspondence_type: str
        :param correspondence_address: The correspondence_address of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type correspondence_address: str
        :param accounting_contact: The accounting_contact of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :type accounting_contact: str
        """
        self.swagger_types = {
            'address': str,
            'address2': str,
            'city': str,
            'customer_no': str,
            'name': str,
            'name2': str,
            'post_code': str,
            'country_code': str,
            'correspondence_type': str,
            'correspondence_address': str,
            'accounting_contact': str
        }

        self.attribute_map = {
            'address': 'Address',
            'address2': 'Address2',
            'city': 'City',
            'customer_no': 'CustomerNo',
            'name': 'Name',
            'name2': 'Name2',
            'post_code': 'PostCode',
            'country_code': 'CountryCode',
            'correspondence_type': 'CorrespondenceType',
            'correspondence_address': 'CorrespondenceAddress',
            'accounting_contact': 'AccountingContact'
        }
        self._address = address
        self._address2 = address2
        self._city = city
        self._customer_no = customer_no
        self._name = name
        self._name2 = name2
        self._post_code = post_code
        self._country_code = country_code
        self._correspondence_type = correspondence_type
        self._correspondence_address = correspondence_address
        self._accounting_contact = accounting_contact

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfq18InvoiceInvoiceAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfq18_InvoiceInvoiceAddress of this AllOfq18InvoiceInvoiceAddress.  # noqa: E501
        :rtype: AllOfq18InvoiceInvoiceAddress
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this AllOfq18InvoiceInvoiceAddress.


        :return: The address of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this AllOfq18InvoiceInvoiceAddress.


        :param address: The address of this AllOfq18InvoiceInvoiceAddress.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address2(self) -> str:
        """Gets the address2 of this AllOfq18InvoiceInvoiceAddress.


        :return: The address2 of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2: str):
        """Sets the address2 of this AllOfq18InvoiceInvoiceAddress.


        :param address2: The address2 of this AllOfq18InvoiceInvoiceAddress.
        :type address2: str
        """
        if address2 is None:
            raise ValueError("Invalid value for `address2`, must not be `None`")  # noqa: E501

        self._address2 = address2

    @property
    def city(self) -> str:
        """Gets the city of this AllOfq18InvoiceInvoiceAddress.


        :return: The city of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this AllOfq18InvoiceInvoiceAddress.


        :param city: The city of this AllOfq18InvoiceInvoiceAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def customer_no(self) -> str:
        """Gets the customer_no of this AllOfq18InvoiceInvoiceAddress.


        :return: The customer_no of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no: str):
        """Sets the customer_no of this AllOfq18InvoiceInvoiceAddress.


        :param customer_no: The customer_no of this AllOfq18InvoiceInvoiceAddress.
        :type customer_no: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def name(self) -> str:
        """Gets the name of this AllOfq18InvoiceInvoiceAddress.


        :return: The name of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AllOfq18InvoiceInvoiceAddress.


        :param name: The name of this AllOfq18InvoiceInvoiceAddress.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def name2(self) -> str:
        """Gets the name2 of this AllOfq18InvoiceInvoiceAddress.


        :return: The name2 of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._name2

    @name2.setter
    def name2(self, name2: str):
        """Sets the name2 of this AllOfq18InvoiceInvoiceAddress.


        :param name2: The name2 of this AllOfq18InvoiceInvoiceAddress.
        :type name2: str
        """
        if name2 is None:
            raise ValueError("Invalid value for `name2`, must not be `None`")  # noqa: E501

        self._name2 = name2

    @property
    def post_code(self) -> str:
        """Gets the post_code of this AllOfq18InvoiceInvoiceAddress.


        :return: The post_code of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code: str):
        """Sets the post_code of this AllOfq18InvoiceInvoiceAddress.


        :param post_code: The post_code of this AllOfq18InvoiceInvoiceAddress.
        :type post_code: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")  # noqa: E501

        self._post_code = post_code

    @property
    def country_code(self) -> str:
        """Gets the country_code of this AllOfq18InvoiceInvoiceAddress.


        :return: The country_code of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this AllOfq18InvoiceInvoiceAddress.


        :param country_code: The country_code of this AllOfq18InvoiceInvoiceAddress.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501

        self._country_code = country_code

    @property
    def correspondence_type(self) -> str:
        """Gets the correspondence_type of this AllOfq18InvoiceInvoiceAddress.


        :return: The correspondence_type of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._correspondence_type

    @correspondence_type.setter
    def correspondence_type(self, correspondence_type: str):
        """Sets the correspondence_type of this AllOfq18InvoiceInvoiceAddress.


        :param correspondence_type: The correspondence_type of this AllOfq18InvoiceInvoiceAddress.
        :type correspondence_type: str
        """
        if correspondence_type is None:
            raise ValueError("Invalid value for `correspondence_type`, must not be `None`")  # noqa: E501

        self._correspondence_type = correspondence_type

    @property
    def correspondence_address(self) -> str:
        """Gets the correspondence_address of this AllOfq18InvoiceInvoiceAddress.


        :return: The correspondence_address of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._correspondence_address

    @correspondence_address.setter
    def correspondence_address(self, correspondence_address: str):
        """Sets the correspondence_address of this AllOfq18InvoiceInvoiceAddress.


        :param correspondence_address: The correspondence_address of this AllOfq18InvoiceInvoiceAddress.
        :type correspondence_address: str
        """
        if correspondence_address is None:
            raise ValueError("Invalid value for `correspondence_address`, must not be `None`")  # noqa: E501

        self._correspondence_address = correspondence_address

    @property
    def accounting_contact(self) -> str:
        """Gets the accounting_contact of this AllOfq18InvoiceInvoiceAddress.


        :return: The accounting_contact of this AllOfq18InvoiceInvoiceAddress.
        :rtype: str
        """
        return self._accounting_contact

    @accounting_contact.setter
    def accounting_contact(self, accounting_contact: str):
        """Sets the accounting_contact of this AllOfq18InvoiceInvoiceAddress.


        :param accounting_contact: The accounting_contact of this AllOfq18InvoiceInvoiceAddress.
        :type accounting_contact: str
        """
        if accounting_contact is None:
            raise ValueError("Invalid value for `accounting_contact`, must not be `None`")  # noqa: E501

        self._accounting_contact = accounting_contact
