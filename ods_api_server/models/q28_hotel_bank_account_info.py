# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ods_api_server.models.base_model_ import Model
from ods_api_server import util


class Q28HotelBankAccountInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, customer_no: str=None, state: str=None, iban: str=None, bic: str=None, account_owner: str=None, mandate_id: str=None):  # noqa: E501
        """Q28HotelBankAccountInfo - a model defined in Swagger

        :param customer_no: The customer_no of this Q28HotelBankAccountInfo.  # noqa: E501
        :type customer_no: str
        :param state: The state of this Q28HotelBankAccountInfo.  # noqa: E501
        :type state: str
        :param iban: The iban of this Q28HotelBankAccountInfo.  # noqa: E501
        :type iban: str
        :param bic: The bic of this Q28HotelBankAccountInfo.  # noqa: E501
        :type bic: str
        :param account_owner: The account_owner of this Q28HotelBankAccountInfo.  # noqa: E501
        :type account_owner: str
        :param mandate_id: The mandate_id of this Q28HotelBankAccountInfo.  # noqa: E501
        :type mandate_id: str
        """
        self.swagger_types = {
            'customer_no': str,
            'state': str,
            'iban': str,
            'bic': str,
            'account_owner': str,
            'mandate_id': str
        }

        self.attribute_map = {
            'customer_no': 'CustomerNo',
            'state': 'State',
            'iban': 'IBAN',
            'bic': 'BIC',
            'account_owner': 'AccountOwner',
            'mandate_id': 'MandateID'
        }
        self._customer_no = customer_no
        self._state = state
        self._iban = iban
        self._bic = bic
        self._account_owner = account_owner
        self._mandate_id = mandate_id

    @classmethod
    def from_dict(cls, dikt) -> 'Q28HotelBankAccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The q28_HotelBankAccountInfo of this Q28HotelBankAccountInfo.  # noqa: E501
        :rtype: Q28HotelBankAccountInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_no(self) -> str:
        """Gets the customer_no of this Q28HotelBankAccountInfo.


        :return: The customer_no of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._customer_no

    @customer_no.setter
    def customer_no(self, customer_no: str):
        """Sets the customer_no of this Q28HotelBankAccountInfo.


        :param customer_no: The customer_no of this Q28HotelBankAccountInfo.
        :type customer_no: str
        """
        if customer_no is None:
            raise ValueError("Invalid value for `customer_no`, must not be `None`")  # noqa: E501

        self._customer_no = customer_no

    @property
    def state(self) -> str:
        """Gets the state of this Q28HotelBankAccountInfo.


        :return: The state of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Q28HotelBankAccountInfo.


        :param state: The state of this Q28HotelBankAccountInfo.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def iban(self) -> str:
        """Gets the iban of this Q28HotelBankAccountInfo.


        :return: The iban of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this Q28HotelBankAccountInfo.


        :param iban: The iban of this Q28HotelBankAccountInfo.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")  # noqa: E501

        self._iban = iban

    @property
    def bic(self) -> str:
        """Gets the bic of this Q28HotelBankAccountInfo.


        :return: The bic of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic: str):
        """Sets the bic of this Q28HotelBankAccountInfo.


        :param bic: The bic of this Q28HotelBankAccountInfo.
        :type bic: str
        """
        if bic is None:
            raise ValueError("Invalid value for `bic`, must not be `None`")  # noqa: E501

        self._bic = bic

    @property
    def account_owner(self) -> str:
        """Gets the account_owner of this Q28HotelBankAccountInfo.


        :return: The account_owner of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._account_owner

    @account_owner.setter
    def account_owner(self, account_owner: str):
        """Sets the account_owner of this Q28HotelBankAccountInfo.


        :param account_owner: The account_owner of this Q28HotelBankAccountInfo.
        :type account_owner: str
        """
        if account_owner is None:
            raise ValueError("Invalid value for `account_owner`, must not be `None`")  # noqa: E501

        self._account_owner = account_owner

    @property
    def mandate_id(self) -> str:
        """Gets the mandate_id of this Q28HotelBankAccountInfo.


        :return: The mandate_id of this Q28HotelBankAccountInfo.
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id: str):
        """Sets the mandate_id of this Q28HotelBankAccountInfo.


        :param mandate_id: The mandate_id of this Q28HotelBankAccountInfo.
        :type mandate_id: str
        """

        self._mandate_id = mandate_id
